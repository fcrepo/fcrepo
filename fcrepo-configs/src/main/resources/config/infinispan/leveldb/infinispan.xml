<?xml version="1.0" encoding="UTF-8"?>
<infinispan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="urn:infinispan:config:5.3 http://www.infinispan.org/schemas/infinispan-config-5.3.xsd"
            xmlns="urn:infinispan:config:5.3">

  <global>
    <globalJmxStatistics enabled="true" allowDuplicateDomains="true"/>
  </global>

  <default>
  </default>

  <namedCache name="FedoraRepository">

    <eviction maxEntries="500"  strategy="LIRS" threadPolicy="DEFAULT"/>

    <transaction
        transactionManagerLookupClass="org.infinispan.transaction.lookup.GenericTransactionManagerLookup"
        transactionMode="TRANSACTIONAL" lockingMode="PESSIMISTIC"/>
    <!--
        Define the cache loaders (i.e., cache stores). Passivation is false because we want *all*
        data to be persisted, not just what doesn't fit into memory. Shared is false because there
        are no other caches sharing this file store. We set preload to false for lazy loading;
        may be improved by preloading and configuring eviction.

        We can have multiple cache loaders, which get chained. But we'll define just one.
     -->

    <loaders passivation="false" shared="false" preload="false">
      <leveldbStore xmlns="urn:infinispan:config:leveldb:5.2"
                    location="${fcrepo.ispn.repo.CacheDirPath:target/repo}/data"
                    expiredLocation="${fcrepo.ispn.repo.CacheDirPath:target/repo}/expired"
          />

    </loaders>
  </namedCache>

  <namedCache name="FedoraRepositoryMetaData">

    <eviction maxEntries="500"  strategy="LIRS" threadPolicy="DEFAULT"/>

    <transaction
            transactionManagerLookupClass="org.infinispan.transaction.lookup.GenericTransactionManagerLookup"
            transactionMode="TRANSACTIONAL" lockingMode="PESSIMISTIC"/>
    <!--
        Define the cache loaders (i.e., cache stores). Passivation is false because we want *all*
        data to be persisted, not just what doesn't fit into memory. Shared is false because there
        are no other caches sharing this file store. We set preload to false for lazy loading;
        may be improved by preloading and configuring eviction.

        We can have multiple cache loaders, which get chained. But we'll define just one.
     -->

    <loaders passivation="false" shared="false" preload="false">
      <leveldbStore xmlns="urn:infinispan:config:leveldb:5.2"
              location="${fcrepo.ispn.CacheDirPath:target}/data"
              expiredLocation="${fcrepo.ispn.CacheDirPath:target}/expired"
              />

  </loaders>
</namedCache>

<namedCache name="FedoraRepositoryBinaryData">

<eviction maxEntries="100"  strategy="LIRS" threadPolicy="DEFAULT"/>

<transaction
        transactionManagerLookupClass="org.infinispan.transaction.lookup.GenericTransactionManagerLookup"
        transactionMode="TRANSACTIONAL" lockingMode="PESSIMISTIC"/>
<!--
    Define the cache loaders (i.e., cache stores). Passivation is false because we want *all*
    data to be persisted, not just what doesn't fit into memory. Shared is false because there
    are no other caches sharing this file store. We set preload to false for lazy loading;
    may be improved by preloading and configuring eviction.

    We can have multiple cache loaders, which get chained. But we'll define just one.
 -->

<loaders passivation="false" shared="false" preload="false">

  <!--
     The 'fetchPersistentState' attribute applies when this cache joins the cluster; the value doesn't
     really matter to us in this case. See the documentation for more options.
   -->
  <loader class="org.infinispan.loaders.file.FileCacheStore" fetchPersistentState="true"
          purgeOnStartup="false">
    <!-- See the documentation for more configuration examples and flags. -->
    <properties>
      <!-- We have to set the location where we want to store the data. -->
      <property name="location" value="${fcrepo.ispn.binary.CacheDirPath:target/FedoraRepositoryBinaryData/storage}"/>

      <property name="fsyncMode" value="perWrite"/>
    </properties>
    <!-- This repository isn't clustered, so we could set up the SingletonStore.
     singletonStore enabled="true" pushStateWhenCoordinator="true" pushStateTimeout="20000"/>
     -->
    <!--
       We could use "write-behind", which actually writes to the file system asynchronously,
       which can improve performance as seen by the JCR client.
       Plus changes are coalesced, meaning that if multiple changes are enqueued for the
       same node, only the last one is written. (This is good much of the time, but not
       always.)
     <async enabled="true" flushLockTimeout="15000" threadPoolSize="5"/>
     -->
  </loader>

</loaders>
</namedCache>
        </infinispan>
