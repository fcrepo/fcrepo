<infinispan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="urn:infinispan:config:6.0 http://www.infinispan.org/schemas/infinispan-config-6.0.xsd"
   xmlns="urn:infinispan:config:6.0">

   <global>
     <globalJmxStatistics allowDuplicateDomains="true" />
   </global>

   <default>
   </default>

   <namedCache name="FedoraRepository">
      <!-- 
          Our Infinispan cache needs to be transactional. However, we'll also configure it to
          use pessimistic locking, which is required whenever applications will be concurrently
          updating nodes within the same process. If you're not sure, use pessimistic locking.
       -->
      
      <eviction maxEntries="100"  strategy="LRU" threadPolicy="DEFAULT"/>
      
      <transaction
         transactionManagerLookupClass="org.infinispan.transaction.lookup.GenericTransactionManagerLookup"
         transactionMode="TRANSACTIONAL" lockingMode="PESSIMISTIC"/>
      <!-- 
          Define the cache loaders (i.e., cache stores). Passivation is false because we want *all* 
          data to be persisted, not just what doesn't fit into memory. Shared is false because there
          are no other caches sharing this file store. We set preload to false for lazy loading;
          may be improved by preloading and configuring eviction.
 
          We can have multiple cache loaders, which get chained. But we'll define just one.
       -->

     <persistence passivation="false">
       <singleFile shared="false"
                   preload="false"
                   fetchPersistentState="true"
                   purgeOnStartup="false"
                   location="${fcrepo.ispn.cache:target/FedoraRepository/storage}" />
     </persistence>

        <!--
   The 'fetchPersistentState' attribute applies when this cache joins the cluster; the value doesn't
   really matter to us in this case. See the documentation for more options.
 -->

   </namedCache>

  <namedCache name="FedoraRepositoryBinaryData">
    <!--
        Our Infinispan cache needs to be transactional. However, we'll also configure it to
        use pessimistic locking, which is required whenever applications will be concurrently
        updating nodes within the same process. If you're not sure, use pessimistic locking.
     -->

    <eviction maxEntries="100"  strategy="LRU" threadPolicy="DEFAULT"/>

    <transaction
            transactionManagerLookupClass="org.infinispan.transaction.lookup.GenericTransactionManagerLookup"
            transactionMode="TRANSACTIONAL" lockingMode="PESSIMISTIC"/>
    <!--
        Define the cache loaders (i.e., cache stores). Passivation is false because we want *all*
        data to be persisted, not just what doesn't fit into memory. Shared is false because there
        are no other caches sharing this file store. We set preload to false for lazy loading;
        may be improved by preloading and configuring eviction.

        We can have multiple cache loaders, which get chained. But we'll define just one.
     -->

    <persistence passivation="false">
      <singleFile shared="false"
                  preload="false"
                  fetchPersistentState="true"
                  purgeOnStartup="false"
                  location="${fcrepo.ispn.binary.cache:target/FedoraRepositoryBinaryData/storage}" />
    </persistence>

      <!--
 The 'fetchPersistentState' attribute applies when this cache joins the cluster; the value doesn't
 really matter to us in this case. See the documentation for more options.
-->

  </namedCache>
</infinispan>
